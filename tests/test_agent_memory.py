#!/usr/bin/env python3\n\"\"\"\n全新Agent记忆系统验证测试\n创建一个全新的Agent来验证记忆系统是否真正可以正常工作\n\"\"\"\nimport asyncio\nimport sys\nfrom pathlib import Path\nfrom typing import List, Dict, Any\n\n# 添加项目根目录到路径\nsys.path.append(str(Path(__file__).parent.parent))\n\nfrom langchain_core.messages import HumanMessage, AIMessage, SystemMessage\nfrom langchain_core.tools import BaseTool\nfrom langgraph.graph import StateGraph, START\n\nfrom app.agents.core.base import BaseAgent, AgentState\nfrom app.agents.core.interfaces import AgentType\nfrom app.models.core.base import ModelAdapter\n\n\nclass MockModelAdapter:\n    \"\"\"增强的模拟模型适配器，详细记录所有调用\"\"\"\n    \n    def __init__(self):\n        self.call_history = []\n        self.call_count = 0\n    \n    async def ainvoke(self, messages):\n        \"\"\"模拟模型调用\"\"\"\n        self.call_count += 1\n        \n        # 记录调用详情\n        call_info = {\n            'call_number': self.call_count,\n            'message_count': len(messages),\n            'messages': [{'type': type(msg).__name__, 'content': getattr(msg, 'content', str(msg))} for msg in messages]\n        }\n        self.call_history.append(call_info)\n        \n        # 根据消息内容生成不同的响应\n        last_message = messages[-1] if messages else None\n        if last_message and hasattr(last_message, 'content'):\n            content = last_message.content.lower()\n            \n            if '记住' in content or 'remember' in content:\n                response = f\"好的，我已经记住了：{last_message.content}\"\n            elif '回忆' in content or 'recall' in content:\n                response = \"根据我的记忆，之前我们讨论过相关内容。\"\n            elif '测试' in content or 'test' in content:\n                response = f\"这是测试响应 #{self.call_count}，我收到了您的消息。\"\n            else:\n                response = f\"我理解了您的消息（调用 #{self.call_count}）。\"\n        else:\n            response = f\"默认响应（调用 #{self.call_count}）\"\n        \n        # 模拟AIMessage响应\n        class MockAIMessage:\n            def __init__(self, content):\n                self.content = content\n                self.type = 'ai'\n        \n        return MockAIMessage(response)\n    \n    async def astream(self, messages):\n        \"\"\"模拟流式响应\"\"\"\n        response = await self.ainvoke(messages)\n        # 将响应分块返回\n        words = response.content.split()\n        for word in words:\n            class MockChunk:\n                def __init__(self, content):\n                    self.content = content\n            yield MockChunk(word + \" \")\n    \n    def get_call_summary(self):\n        \"\"\"获取调用摘要\"\"\"\n        return {\n            'total_calls': self.call_count,\n            'call_history': self.call_history\n        }\n\n\nclass MemoryTestAgent(BaseAgent):\n    \"\"\"专门用于测试记忆功能的Agent\"\"\"\n    \n    def __init__(self, model_adapter: ModelAdapter, **kwargs):\n        super().__init__(model_adapter, **kwargs)\n        self.conversation_memory = []  # 简单的对话记忆\n        self.test_results = []  # 测试结果记录\n    \n    @property\n    def agent_type(self) -> AgentType:\n        return AgentType.CUSTOM\n    \n    def _create_workflow(self) -> StateGraph:\n        \"\"\"创建包含记忆功能的工作流\"\"\"\n        workflow = StateGraph(AgentState)\n        \n        # 添加节点\n        workflow.add_node(\"memory_check\", self._check_memory)\n        workflow.add_node(\"process_input\", self._process_input)\n        workflow.add_node(\"update_memory\", self._update_memory)\n        workflow.add_node(\"generate_response\", self._generate_response)\n        \n        # 定义流程\n        workflow.add_edge(START, \"memory_check\")\n        workflow.add_edge(\"memory_check\", \"process_input\")\n        workflow.add_edge(\"process_input\", \"update_memory\")\n        workflow.add_edge(\"update_memory\", \"generate_response\")\n        workflow.add_edge(\"generate_response\", \"__end__\")\n        \n        return workflow\n    \n    async def _check_memory(self, state: AgentState) -> AgentState:\n        \"\"\"检查记忆状态\"\"\"\n        memory_info = {\n            'memory_count': len(self.conversation_memory),\n            'last_interactions': self.conversation_memory[-3:] if self.conversation_memory else []\n        }\n        \n        # 添加记忆信息到状态\n        state['memory_info'] = memory_info\n        \n        self.test_results.append({\n            'step': 'memory_check',\n            'memory_count': len(self.conversation_memory),\n            'status': 'completed'\n        })\n        \n        return state\n    \n    async def _process_input(self, state: AgentState) -> AgentState:\n        \"\"\"处理输入\"\"\"\n        user_input = state.get('user_input', '')\n        \n        # 分析输入类型\n        input_analysis = {\n            'is_memory_command': any(keyword in user_input.lower() for keyword in ['记住', '回忆', 'remember', 'recall']),\n            'is_test_command': '测试' in user_input.lower() or 'test' in user_input.lower(),\n            'input_length': len(user_input)\n        }\n        \n        state['input_analysis'] = input_analysis\n        \n        self.test_results.append({\n            'step': 'process_input',\n            'analysis': input_analysis,\n            'status': 'completed'\n        })\n        \n        return state\n    \n    async def _update_memory(self, state: AgentState) -> AgentState:\n        \"\"\"更新记忆\"\"\"\n        user_input = state.get('user_input', '')\n        \n        # 添加到对话记忆\n        memory_entry = {\n            'timestamp': asyncio.get_event_loop().time(),\n            'user_input': user_input,\n            'memory_size_before': len(self.conversation_memory)\n        }\n        \n        self.conversation_memory.append(memory_entry)\n        \n        state['memory_updated'] = True\n        state['current_memory_size'] = len(self.conversation_memory)\n        \n        self.test_results.append({\n            'step': 'update_memory',\n            'memory_size': len(self.conversation_memory),\n            'status': 'completed'\n        })\n        \n        return state\n    \n    async def _generate_response(self, state: AgentState) -> AgentState:\n        \"\"\"生成响应\"\"\"\n        # 构建包含记忆信息的消息\n        messages = []\n        \n        # 系统消息\n        system_msg = SystemMessage(content=\"你是一个具有记忆功能的AI助手，能够记住之前的对话内容。\")\n        messages.append(system_msg)\n        \n        # 添加记忆上下文\n        if self.conversation_memory:\n            memory_context = \"之前的对话记录：\\n\"\n            for i, entry in enumerate(self.conversation_memory[-3:], 1):  # 只包含最近3条\n                memory_context += f\"{i}. {entry['user_input']}\\n\"\n            \n            context_msg = SystemMessage(content=memory_context)\n            messages.append(context_msg)\n        \n        # 当前用户输入\n        user_input = state.get('user_input', '')\n        user_msg = HumanMessage(content=user_input)\n        messages.append(user_msg)\n        \n        # 调用模型\n        try:\n            response = await self.model_adapter.ainvoke(messages)\n            state['response'] = response.content\n            state['model_called'] = True\n            \n            self.test_results.append({\n                'step': 'generate_response',\n                'response_generated': True,\n                'response_length': len(response.content),\n                'status': 'completed'\n            })\n            \n        except Exception as e:\n            state['response'] = f\"生成响应时出错: {str(e)}\"\n            state['model_called'] = False\n            \n            self.test_results.append({\n                'step': 'generate_response',\n                'error': str(e),\n                'status': 'failed'\n            })\n        \n        return state\n    \n    def get_memory_stats(self):\n        \"\"\"获取记忆统计信息\"\"\"\n        return {\n            'total_memories': len(self.conversation_memory),\n            'memory_entries': self.conversation_memory,\n            'test_results': self.test_results\n        }\n\n\nasync def test_agent_memory_system():\n    \"\"\"测试Agent记忆系统的完整功能\"\"\"\n    print(\"🧠 开始Agent记忆系统测试\")\n    print(\"=\" * 50)\n    \n    # 创建模拟模型适配器\n    mock_adapter = MockModelAdapter()\n    \n    # 创建测试Agent\n    test_agent = MemoryTestAgent(\n        model_adapter=mock_adapter,\n        name=\"记忆测试Agent\",\n        description=\"专门用于测试记忆功能的Agent\"\n    )\n    \n    # 测试用例\n    test_cases = [\n        \"请记住我的名字是张三\",\n        \"我今天很开心\",\n        \"请回忆一下我之前说过什么\",\n        \"测试记忆功能是否正常\",\n        \"我的爱好是读书和旅行\"\n    ]\n    \n    print(f\"📝 准备执行 {len(test_cases)} 个测试用例\")\n    print()\n    \n    # 执行测试\n    for i, test_input in enumerate(test_cases, 1):\n        print(f\"🔍 测试用例 {i}: {test_input}\")\n        \n        try:\n            # 调用Agent\n            result = await test_agent.ainvoke(test_input)\n            \n            print(f\"✅ 响应: {result}\")\n            print(f\"📊 当前记忆数量: {len(test_agent.conversation_memory)}\")\n            \n        except Exception as e:\n            print(f\"❌ 测试失败: {str(e)}\")\n        \n        print(\"-\" * 30)\n    \n    # 输出详细统计\n    print(\"\\n📈 测试统计信息:\")\n    print(\"=\" * 50)\n    \n    # Agent记忆统计\n    memory_stats = test_agent.get_memory_stats()\n    print(f\"🧠 Agent记忆统计:\")\n    print(f\"   总记忆条目: {memory_stats['total_memories']}\")\n    print(f\"   测试步骤完成: {len(memory_stats['test_results'])}\")\n    \n    # 模型调用统计\n    model_stats = mock_adapter.get_call_summary()\n    print(f\"\\n🤖 模型调用统计:\")\n    print(f\"   总调用次数: {model_stats['total_calls']}\")\n    \n    # 详细的调用历史\n    print(f\"\\n📋 详细调用历史:\")\n    for call in model_stats['call_history']:\n        print(f\"   调用 #{call['call_number']}: {call['message_count']} 条消息\")\n    \n    # 记忆内容详情\n    print(f\"\\n💭 记忆内容详情:\")\n    for i, memory in enumerate(memory_stats['memory_entries'], 1):\n        print(f\"   记忆 {i}: {memory['user_input'][:50]}...\")\n    \n    # 测试结果汇总\n    print(f\"\\n🎯 测试结果汇总:\")\n    successful_steps = sum(1 for result in memory_stats['test_results'] if result['status'] == 'completed')\n    total_steps = len(memory_stats['test_results'])\n    print(f\"   成功步骤: {successful_steps}/{total_steps}\")\n    print(f\"   成功率: {successful_steps/total_steps*100:.1f}%\")\n    \n    # 验证记忆系统是否正常工作\n    memory_working = memory_stats['total_memories'] > 0\n    model_working = model_stats['total_calls'] > 0\n    \n    print(f\"\\n🔍 系统验证:\")\n    print(f\"   记忆系统: {'✅ 正常' if memory_working else '❌ 异常'}\")\n    print(f\"   模型调用: {'✅ 正常' if model_working else '❌ 异常'}\")\n    \n    overall_success = memory_working and model_working\n    print(f\"   整体状态: {'🎉 测试通过' if overall_success else '⚠️ 测试失败'}\")\n    \n    return overall_success\n\n\nif __name__ == \"__main__\":\n    print(\"🚀 启动Agent记忆系统验证测试\")\n    print(\"这个测试将验证Agent是否能够正确地记住和回忆对话内容\")\n    print()\n    \n    try:\n        # 运行测试\n        success = asyncio.run(test_agent_memory_system())\n        \n        if success:\n            print(\"\\n🎊 恭喜！Agent记忆系统测试完全通过！\")\n            print(\"Agent能够正确地记住对话内容并在后续交互中使用这些记忆。\")\n        else:\n            print(\"\\n⚠️ 测试发现问题，请检查Agent记忆系统的实现。\")\n            \n    except Exception as e:\n        print(f\"\\n💥 测试过程中发生严重错误: {str(e)}\")\n        import traceback\n        traceback.print_exc()\n    \n    print(\"\\n测试完成。\")"